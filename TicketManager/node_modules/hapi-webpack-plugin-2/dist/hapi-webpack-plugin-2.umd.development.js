(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('path'), require('webpack'), require('webpack-dev-middleware'), require('webpack-hot-middleware')) :
  typeof define === 'function' && define.amd ? define(['exports', 'path', 'webpack', 'webpack-dev-middleware', 'webpack-hot-middleware'], factory) :
  (global = global || self, factory(global['hapi-webpack-plugin-2'] = {}, global.path, global.webpack, global.webpackDevMiddleware, global.webpackHotMiddleware));
}(this, function (exports, path, webpack, webpackDevMiddleware, webpackHotMiddleware) { 'use strict';

  path = path && path.hasOwnProperty('default') ? path['default'] : path;
  webpack = webpack && webpack.hasOwnProperty('default') ? webpack['default'] : webpack;
  webpackDevMiddleware = webpackDevMiddleware && webpackDevMiddleware.hasOwnProperty('default') ? webpackDevMiddleware['default'] : webpackDevMiddleware;
  webpackHotMiddleware = webpackHotMiddleware && webpackHotMiddleware.hasOwnProperty('default') ? webpackHotMiddleware['default'] : webpackHotMiddleware;

  var createExtension = function createExtension(server, middleware) {
    server.ext({
      type: 'onRequest',
      method: function method(request, h) {
        return new Promise(function (resolve, reject) {
          var _request$raw = request.raw,
              req = _request$raw.req,
              res = _request$raw.res;
          middleware(req, res, function (err) {
            return err ? reject(err) : resolve(h["continue"]);
          });
        });
      }
    });
  };

  var getConfig = function getConfig(options) {
    if (options.configPath) {
      var config = require(path.resolve(process.cwd(), options.configPath));

      return {
        compiler: webpack(config),
        assets: config.assets,
        hot: config.hot
      };
    } else if (options.config) {
      return options.config;
    } else {
      throw new Error('No config or configPath provided.');
    }
  };

  function register(server, options) {
    var _getConfig = getConfig(options),
        compiler = _getConfig.compiler,
        assets = _getConfig.assets,
        hot = _getConfig.hot;

    createExtension(server, webpackDevMiddleware(compiler, assets));
    createExtension(server, webpackHotMiddleware(compiler, hot));
    server.expose({
      compiler: compiler
    });
  }

  var HapiWebpackPlugin = {
    name: 'hapi-webpack-plugin-2',
    version: '1.0.2',
    once: true,
    register: register
  };

  exports.default = HapiWebpackPlugin;

}));
//# sourceMappingURL=hapi-webpack-plugin-2.umd.development.js.map
