'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var path = _interopDefault(require('path'));
var webpack = _interopDefault(require('webpack'));
var webpackDevMiddleware = _interopDefault(require('webpack-dev-middleware'));
var webpackHotMiddleware = _interopDefault(require('webpack-hot-middleware'));

var createExtension = function createExtension(server, middleware) {
  server.ext({
    type: 'onRequest',
    method: function method(request, h) {
      return new Promise(function (resolve, reject) {
        var _request$raw = request.raw,
            req = _request$raw.req,
            res = _request$raw.res;
        middleware(req, res, function (err) {
          return err ? reject(err) : resolve(h["continue"]);
        });
      });
    }
  });
};

var getConfig = function getConfig(options) {
  if (options.configPath) {
    var config = require(path.resolve(process.cwd(), options.configPath));

    return {
      compiler: webpack(config),
      assets: config.assets,
      hot: config.hot
    };
  } else if (options.config) {
    return options.config;
  } else {
    throw new Error('No config or configPath provided.');
  }
};

function register(server, options) {
  var _getConfig = getConfig(options),
      compiler = _getConfig.compiler,
      assets = _getConfig.assets,
      hot = _getConfig.hot;

  createExtension(server, webpackDevMiddleware(compiler, assets));
  createExtension(server, webpackHotMiddleware(compiler, hot));
  server.expose({
    compiler: compiler
  });
}

var HapiWebpackPlugin = {
  name: 'hapi-webpack-plugin-2',
  version: '1.0.2',
  once: true,
  register: register
};

exports.default = HapiWebpackPlugin;
//# sourceMappingURL=hapi-webpack-plugin-2.cjs.development.js.map
